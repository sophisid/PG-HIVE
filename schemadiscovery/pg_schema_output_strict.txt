-- NODE TYPES --
CREATE NODE TYPE PlaceType : Place {type STRING, name STRING, id DOUBLE, url STRING};
CREATE NODE TYPE PersonType : Person {browserUsed STRING, lastName STRING, firstName STRING, gender STRING, id DOUBLE, locationIP STRING, creationDate DATE, birthday DATE};
CREATE NODE TYPE OrganisationType : Organisation {type STRING, name STRING, id DOUBLE, url STRING};
CREATE NODE TYPE EmailType : Email {address STRING};

-- EDGE TYPES --
CREATE EDGE TYPE has_emailType : HAS_EMAIL;
CREATE EDGE TYPE is_located_inType : IS_LOCATED_IN;
CREATE EDGE TYPE is_located_in_is_part_ofType : IS_LOCATED_IN | IS_PART_OF;
CREATE EDGE TYPE speaksType : SPEAKS {language STRING};
CREATE EDGE TYPE study_atType : STUDY_AT {classYear INTEGER};
CREATE EDGE TYPE works_atType : WORKS_AT {workFrom INTEGER};

CREATE GRAPH TYPE NewGraphSchema STRICT {
  (PlaceType),
  (PersonType),
  (OrganisationType),
  (EmailType),
  (:PersonType)-[has_emailType]->(:EmailType),
  (:OrganisationType)-[is_located_inType]->(:PlaceType),
  (:PlaceType|PersonType)-[is_located_in_is_part_ofType]->(:PlaceType),
  (:PersonType)-[speaksType]->(:PersonType),
  (:PersonType)-[study_atType]->(:OrganisationType),
  (:PersonType)-[works_atType]->(:OrganisationType),

  // Constraints
  FOR (x:PersonType) SINGLETON x,y WITHIN (x)-[y: has_emailType]->(:EmailType)
  FOR (x:OrganisationType) SINGLETON x,y WITHIN (x)-[y: is_located_inType]->(:PlaceType)
  FOR (x:PersonType) SINGLETON x,y WITHIN (x)-[y: speaksType]->(:PersonType)
  FOR (x:PersonType) SINGLETON x,y WITHIN (x)-[y: study_atType]->(:OrganisationType)
  FOR (x:PersonType) SINGLETON x,y WITHIN (x)-[y: works_atType]->(:OrganisationType)
}
